# This is a basic workflow to help you get started with Actions
 
name: Enterprise-Workflow

on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  #push:
    #branches:
      #- release
      #- 'migrations/**'
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
 
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: "002"
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: false
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true # For security purposes, this is set to true to enable latest Node20 version
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    env:
      stage: 'Build'
      
      # Environment Secrets - In a Production setup, Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      DATABASE_NAME: "WidgetBuild"
      ENVIRONMENT: "Build" 
      TARGET_DATABASE_USERNAME : "user" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "pass" # If using SQL Authentication, make sure to populate these fields!

      displayName: 'Build'
      executeBuild: true
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info clean info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false' "-plugins.clean.mode=all"
        
      # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false' -baselineOnMigrate="true"
          
      # Runs the Flyway Undo command against the Build database
      - name: undo Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info undo info -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -baselineOnMigrate="true" -cleanDisabled='false' -target="${{ env.FIRST_UNDO_SCRIPT }}"
 
       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}/migrations Artifact_Files/Migration/
 
      
      #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v3
        with: 
          name: flyway-build-artifact
          path: Artifact_Files/Migration/

  test:
    name: Deploy Test
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'test' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: build
    env:
      stage: 'Test'

      DATABASE_NAME: "AutoPilotTest"

      ENVIRONMENT: "Test" 
      TARGET_DATABASE_USERNAME : "user" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "pass" # If using SQL Authentication, make sure to populate these fields!

      CHECK_ENVIRONMENT: "Check" 
      CHECK_DATABASE_USERNAME : "user" # If using SQL Authentication, make sure to populate these fields!
      CHECK_DATABASE_PASSWORD : "pass" # If using SQL Authentication, make sure to populate these fields!
      # End of Environment Secrets #
      generateDriftAndChangeReport: true
      failReleaseIfDriftDetected: false
      staticCodeAnalysis: false #Currently not setup in this pipeline
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

       # Runs the Flyway Check command, to produce a deployment report, against the Production database
      - name: Create Check Reports
        if: env.generateDriftAndChangeReport == 'true'
        run: |
          flyway check -dryrun -changes -drift -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildEnvironment=${{ env.CHECK_ENVIRONMENT }}" "-check.buildUser=${{ env.CHECK_USERNAME }}" "-check.buildPassword=${{ env.CHECK_PASSWORD }}" "-reportFilename=${{ GITHUB.WORKSPACE }}\reports\${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-${{ env.ENVIRONMENT }}-Check-Report.html" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}"
        continue-on-error: true

        # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}\reports Artifact_Files/Reports/

      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v3
        with: 
          name: flyway-reports
          path: Artifact_Files/Reports/
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"

  prod:
    name: Deploy Prod
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: test
    env:
      stage: 'Prod'

      DATABASE_NAME: "AutoPilotProd"

      ENVIRONMENT: "Prod" 
      TARGET_DATABASE_USERNAME : "user" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "pass" # If using SQL Authentication, make sure to populate these fields!

      CHECK_ENVIRONMENT: "Check" 
      CHECK_DATABASE_USERNAME : "user" # If using SQL Authentication, make sure to populate these fields!
      CHECK_DATABASE_PASSWORD : "pass" # If using SQL Authentication, make sure to populate these fields!
      # End of Environment Secrets #
      generateDriftAndChangeReport: true
      failReleaseIfDriftDetected: false
      staticCodeAnalysis: false #Currently not setup in this pipeline
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

       # Runs the Flyway Check command, to produce a deployment report, against the Production database
      - name: Create Check Reports
        if: env.generateDriftAndChangeReport == 'true'
        run: |
          flyway check -dryrun -changes -drift -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildEnvironment=${{ env.CHECK_ENVIRONMENT }}" "-check.buildUser=${{ env.CHECK_USERNAME }}" "-check.buildPassword=${{ env.CHECK_PASSWORD }}" "-reportFilename=${{ GITHUB.WORKSPACE }}\reports\${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-${{ env.ENVIRONMENT }}-Check-Report.html" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}"
        continue-on-error: true

        # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}\reports Artifact_Files/Reports/

      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v3
        with: 
          name: flyway-reports
          path: Artifact_Files/Reports/
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"